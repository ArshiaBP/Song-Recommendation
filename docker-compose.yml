version: '3.8'

networks:
  hw_net:
    driver: bridge
    name: hw_net

services:
  request-registeration-service:
    build: ./request-registeration-service
    container_name: request-registeration-service
    depends_on:
      db-service:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - ./request-registeration-service.env
    networks:
      - hw_net

  songID-identification-service:
    build: ./songID-identification-service
    container_name: songID-identification-service
    depends_on:
      db-service:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - ./songID-identification-service.env
    networks:
      - hw_net

  email-service:
    build: ./email-service
    container_name: email-service
    depends_on:
      db-service:
        condition: service_healthy
    env_file:
      - ./email-service.env
    networks:
      - hw_net

  db-service:
    image: postgres:13-alpine
    container_name: db-service
    restart: always
    environment:
      -POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      -POSTGRES_USER: ${DATABASE_USERNAME}
      -POSTGRES_DB: ${DATABASE_DB}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hw_net
    volumes:
      - ./data/pg-data:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:3.9-alpine
    container_name: rabbitmq
    restart: always
    environment:
      -AMQP_URL: ${RabbitMQ_URL}
      -RABBITMQ_DEFAULT_USER: ${RabbitMQ_User}
      -RABBITMQ_DEFAULT_PASS: ${RabbitMQ_Pass}
    volumes:
      - ./data/rabbitmq-data:/var/lib/rabbitmq

